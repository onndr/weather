{"version":3,"sources":["assets/images/preloading-img.svg","components/LocationInput.js","components/Preloader.js","components/WeatherInfo.js","api/api.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LocationInput","request","setLocation","location","className","onKeyPress","e","key","length","onChange","target","value","onBlur","autoFocus","type","placeholder","onClick","Preloader","src","image","alt","WeatherInfo","data","error","isFetching","weather","main","temp","feels_like","humidity","clouds","all","visibility","pressure","wind","speed","getCurrentWeather","cityName","a","fetch","response","ok","json","Error","setErrorAC","setWeatherDataAC","initialState","localStorage","getItem","undefined","reducer","state","action","App","useReducer","dispatch","useEffect","requestCurrentWeather","res","setItem","message","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,4C,yLCmB5BC,G,MAjBO,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,SAC1C,OACI,yBAAKC,UAAU,4BACX,2BACIC,WAAY,SAAAC,GAAC,MAAc,UAAVA,EAAEC,KAAmBJ,EAASK,QAAUP,EAAQE,IACjEM,SAAU,SAAAH,GAAC,OAAIJ,EAAYI,EAAEI,OAAOC,QACpCC,OAAQ,kBAAMT,EAASK,QAAUP,EAAQE,IACzCQ,MAAOR,EACPU,WAAW,EACXT,UAAU,iBACVU,KAAK,OACLC,YAAY,aAEhB,4BAAQC,QAAS,kBAAMf,EAAQE,KAA/B,a,gBCJGc,EARG,WACd,OACI,yBAAKb,UAAU,aACX,yBAAKc,IAAKC,IAAOC,IAAI,OCiBlBC,EApBK,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WAC/B,OACI,yBAAKpB,UAAU,0BACX,wBAAIA,UAAU,kBAAd,oBAAqD,OAAJkB,QAAI,IAAJA,OAAA,EAAAA,EAAMG,UAAW,mCAASH,EAAKG,QAAQ,GAAGC,OAC1FH,GAAS,yBAAKnB,UAAU,SAAf,yCAGToB,GAAc,kBAAC,EAAD,OACV,OAAJF,QAAI,IAAJA,OAAA,EAAAA,EAAMI,OAAQ,6BACX,6CAAmBJ,EAAKI,KAAKC,KAA7B,UACA,4CAAkBL,EAAKI,KAAKE,WAA5B,UACA,0CAAgBN,EAAKI,KAAKG,SAA1B,KACA,4CAAkBP,EAAKQ,OAAOC,IAA9B,KACA,4CAAkBT,EAAKU,WAAvB,KACA,0CAAgBV,EAAKI,KAAKO,SAA1B,OACA,4CAAkBX,EAAKY,KAAKC,MAA5B,UCjBHC,EAAiB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACNC,MAAM,qDAAD,OAAsDF,EAAtD,kBAFjB,mCAEiB,kBADC,YACvBG,EADuB,QAEhBC,GAFgB,gCAGZD,EAASE,OAHG,qDAIhB,IAAIC,MAAM,sBAJM,4CAAH,sD,OCMjBC,EAAa,SAACrB,GAAD,MAAY,CAACT,KALrB,YAKsCS,UAC3CsB,EAAmB,SAACvB,GAAD,MAAW,CAACR,KALnB,mBAK2CQ,SAEvDwB,EAAe,CACxB3C,SAAU4C,aAAaC,QAAQ,aAAe,GAC9CxB,YAAY,EACZD,WAAO0B,EACP3B,UAAM2B,GAGGC,EAAU,SAACC,EAAOC,GAC3B,OAAQA,EAAOtC,MACX,IAnBqB,uBAoBjB,OAAO,2BACAqC,GADP,IAEIhD,SAAUiD,EAAOjD,WAEzB,IAvBgB,kBAwBZ,OAAO,2BACAgD,GADP,IAEI3B,YAAa2B,EAAM3B,aAE3B,IA3BU,YA4BN,OAAO,2BACA2B,GADP,IAEI5B,MAAO6B,EAAO7B,QAEtB,IA/BiB,mBAgCb,OAAO,2BACA4B,GADP,IAEI7B,KAAK,eAAK8B,EAAO9B,QAEzB,QAAS,OAAO6B,ICITE,EApCH,WAAO,IAAD,EACYC,qBAAWJ,EAASJ,GADhC,mBACPK,EADO,KACAI,EADA,KAEdC,qBAAW,WACJL,EAAMhD,UAAUsD,MACpB,IACH,IAGMA,EAAqB,uCAAG,4BAAAnB,EAAA,kEAEnBa,EAAM5B,OAAOgC,EAASX,EAAW,MACjCO,EAAMhD,SAHa,wBAIlBoD,EDbuB,CAACzC,KALhB,oBCcU,SAKAsB,EAAkBe,EAAMhD,UALxB,OAKZuD,EALY,OAMlBH,EAASV,EAAiBa,IAC1BH,EDhBuB,CAACzC,KALhB,oBCsBRiC,aAAaY,QAAQ,WAAYR,EAAMhD,UARrB,0DAWtBoD,EDpB2B,CAACzC,KALhB,oBC0BZyC,EAASX,EAAW,KAAEgB,UACtBL,EAASV,OAAiBI,IAbJ,0DAAH,qDAiB3B,OACI,yBAAK7C,UAAU,OACX,4BAAQA,UAAU,cAAlB,WAGA,kBAAC,EAAD,CAAeD,SAAUgD,EAAMhD,SAAUD,YAzB7B,SAACS,GACjB4C,EDRoC,CAACzC,KALhB,uBAK4CX,SCQ1CQ,KAwBgDV,QAASwD,IAC5E,kBAAC,EAAD,CAAajC,WAAY2B,EAAM3B,WAAYD,MAAO4B,EAAM5B,MAAOD,KAAM6B,EAAM7B,SC1BnEuC,QACW,cAA7BC,OAAO3D,SAAS4D,UAEe,UAA7BD,OAAO3D,SAAS4D,UAEhBD,OAAO3D,SAAS4D,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApD,GACLqD,QAAQrD,MAAMA,EAAMqC,c","file":"static/js/main.d14480ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/preloading-img.3741b811.svg\";","import React from 'react'\r\n\r\nconst LocationInput = ({request, setLocation, location}) => {\r\n    return (\r\n        <div className=\"location-input-container\">\r\n            <input\r\n                onKeyPress={e => e.key === 'Enter' && location.length && request(location)}\r\n                onChange={e => setLocation(e.target.value)}\r\n                onBlur={() => location.length && request(location)}\r\n                value={location}\r\n                autoFocus={true}\r\n                className=\"location-input\"\r\n                type=\"text\"\r\n                placeholder=\"location\"\r\n            />\r\n            <button onClick={() => request(location)} >Search</button>\r\n        </div>\r\n    )\r\n}\r\nexport default LocationInput","import React from \"react\"\r\nimport image from '../assets/images/preloading-img.svg'\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className=\"preloader\">\r\n            <img src={image} alt=\"\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader","import React from 'react'\r\nimport Preloader from \"./Preloader\";\r\n\r\nconst WeatherInfo = ({data, error, isFetching}) => {\r\n    return (\r\n        <div className=\"weather-info-container\">\r\n            <h3 className=\"weather-header\" >Current weather {data?.weather && <span>- {data.weather[0].main}</span>}</h3>\r\n            {error && <div className=\"error\" >\r\n                You entered wrong location, try again\r\n            </div>}\r\n            {isFetching && <Preloader/>}\r\n            {data?.main && <div>\r\n                <div>Temperature: {data.main.temp}&#8451;</div>\r\n                <div>Feels like: {data.main.feels_like}&#8451;</div>\r\n                <div>Humidity: {data.main.humidity}%</div>\r\n                <div>Cloudiness: {data.clouds.all}%</div>\r\n                <div>Visibility: {data.visibility}m</div>\r\n                <div>Pressure: {data.main.pressure}hPa</div>\r\n                <div>Wind speed: {data.wind.speed}m/s</div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\nexport default WeatherInfo","const APIKEY = 'd84386b02381d47b911f8b5b21c2f655';\r\nexport const getCurrentWeather = async (cityName) => {\r\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${APIKEY}&units=metric`)\r\n    if (response.ok) {\r\n        return await response.json()\r\n    } else throw new Error('location not found')\r\n}","const SET_CURRENT_LOCATION = 'SET_CURRENT_LOCATION'\r\nconst TOGGLE_FETCHING = 'TOGGLE_FETCHING'\r\nconst SET_ERROR = 'SET_ERROR'\r\nconst SET_WEATHER_DATA = 'SET_WEATHER_DATA'\r\n\r\nexport const setLocationAC = (location) => ({type: SET_CURRENT_LOCATION, location})\r\nexport const toggleFetchingAC = () => ({type: TOGGLE_FETCHING})\r\nexport const setErrorAC = (error) => ({type: SET_ERROR, error})\r\nexport const setWeatherDataAC = (data) => ({type: SET_WEATHER_DATA, data})\r\n\r\nexport const initialState = {\r\n    location: localStorage.getItem('location') || '',\r\n    isFetching: false,\r\n    error: undefined,\r\n    data: undefined\r\n}\r\n\r\nexport const reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case SET_CURRENT_LOCATION:\r\n            return {\r\n                ...state,\r\n                location: action.location\r\n            }\r\n        case TOGGLE_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: !state.isFetching\r\n            }\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        case SET_WEATHER_DATA:\r\n            return {\r\n                ...state,\r\n                data: {...action.data}\r\n            }\r\n        default: return state\r\n    }\r\n}","import React, {useEffect, useReducer} from 'react';\nimport './App.css';\nimport LocationInput from './components/LocationInput';\nimport WeatherInfo from './components/WeatherInfo';\nimport {getCurrentWeather} from './api/api';\nimport {initialState, reducer, setErrorAC, setLocationAC, setWeatherDataAC, toggleFetchingAC} from \"./store/store\";\n\nconst App = () => {\n    const [state, dispatch] = useReducer(reducer, initialState)\n    useEffect( () => {\n        if(state.location) requestCurrentWeather()\n    }, [])\n    const setLocation = (value) => {\n        dispatch(setLocationAC(value))\n    }\n    const requestCurrentWeather = async () => {\n        try {\n            if(state.error){dispatch(setErrorAC(''))}\n            if(state.location){\n                dispatch(toggleFetchingAC())\n                const res = await getCurrentWeather(state.location)\n                dispatch(setWeatherDataAC(res))\n                dispatch(toggleFetchingAC())\n                localStorage.setItem('location', state.location)\n            }\n        } catch (e) {\n            dispatch(toggleFetchingAC())\n            dispatch(setErrorAC(e.message))\n            dispatch(setWeatherDataAC(undefined))\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                Weather\n            </header>\n            <LocationInput location={state.location} setLocation={setLocation} request={requestCurrentWeather}/>\n            <WeatherInfo isFetching={state.isFetching} error={state.error} data={state.data}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}